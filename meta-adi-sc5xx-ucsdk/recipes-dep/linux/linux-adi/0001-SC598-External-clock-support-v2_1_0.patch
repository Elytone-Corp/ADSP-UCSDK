From e1d4bf23c1acf12b8194adc9d1bb21c51c218b18 Mon Sep 17 00:00:00 2001
From: Harvin Almeida <harvin.almeida@analog.com>
Date: Mon, 10 Oct 2022 12:22:36 -0500
Subject: [PATCH] SC598 External clock support v2_1_0

---
 arch/arm64/boot/dts/adi/sc598-som-ezkit.dts | 12 ++++++++++++
 drivers/clocksource/timer-adi-adsp-sc5xx.c  |  5 +++++
 include/linux/soc/adi/cpu.h                 |  1 +
 3 files changed, 18 insertions(+)

diff --git a/arch/arm64/boot/dts/adi/sc598-som-ezkit.dts b/arch/arm64/boot/dts/adi/sc598-som-ezkit.dts
index a7d58033c7ae..55787417c540 100644
--- a/arch/arm64/boot/dts/adi/sc598-som-ezkit.dts
+++ b/arch/arm64/boot/dts/adi/sc598-som-ezkit.dts
@@ -133,6 +133,13 @@
 	/* adi,average; */
 };
 
+&gptimer3 {
+	/* enable PB_03 to work as TIMER0_TMR3 */
+	pinctrl-names = "default";
+	pinctrl-0 = <&extclkin_default>;
+	status = "okay";
+};
+
 &uart0 {
 	/* enable-pin = <&ssw0 5 GPIO_ACTIVE_LOW>;	 UART0_EN */
 	/* hwflow-en-pin = <&ssw0 6 GPIO_ACTIVE_LOW>;  UART0_FLOW_EN */
@@ -600,6 +607,11 @@
 };
 
 &pinctrl0 {
+	extclkin_default: extclkin_default_pins {
+		pins {
+			pinmux = <ADI_ADSP_PINMUX('B', 3, ADI_ADSP_PINFUNC_ALT0)>;
+		};
+	};
 	uart0_default: uart0_default_pins {
 		pins {
 			pinmux = <ADI_ADSP_PINMUX('A', 6, ADI_ADSP_PINFUNC_ALT1)>,
diff --git a/drivers/clocksource/timer-adi-adsp-sc5xx.c b/drivers/clocksource/timer-adi-adsp-sc5xx.c
index b0247ec9490d..1015c98db8a8 100644
--- a/drivers/clocksource/timer-adi-adsp-sc5xx.c
+++ b/drivers/clocksource/timer-adi-adsp-sc5xx.c
@@ -164,6 +164,11 @@ static bool gptimer_is_running(struct sc5xx_gptimer *timer) {
 	return (stat & check) == check;
 }
 
+static uint16_t get_gptimer_run(void)
+{
+	return readw(gptimer_controller.base + GPTIMER_RUN);
+}
+
 /**
  * Scheduler/clocksource functions
  */
diff --git a/include/linux/soc/adi/cpu.h b/include/linux/soc/adi/cpu.h
index 065318442bbb..1e0fcb3f22d8 100644
--- a/include/linux/soc/adi/cpu.h
+++ b/include/linux/soc/adi/cpu.h
@@ -110,6 +110,7 @@ void     set_gptimer_config(struct sc5xx_gptimer *timer, uint16_t config);
 void     enable_gptimers(uint16_t mask);
 void     disable_gptimers(uint16_t mask);
 void     map_gptimers(void);
+uint16_t get_gptimer_run(void);
 uint16_t get_gptimer_status(void);
 void     set_gptimer_status(uint16_t value);
 void     set_spu_securep_msec(uint16_t n, bool msec);
-- 
2.17.1

